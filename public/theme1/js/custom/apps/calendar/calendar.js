/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/theme1/js/custom/apps/calendar/calendar.js":
/*!*********************************************************************!*\
  !*** ./resources/assets/theme1/js/custom/apps/calendar/calendar.js ***!
  \*********************************************************************/
/***/ (() => {

eval(" // Class definition\n\nvar KTAppCalendar = function () {\n  // Shared variables\n  // Calendar variables\n  var calendar;\n  var data = {\n    id: '',\n    eventName: '',\n    eventDescription: '',\n    eventLocation: '',\n    startDate: '',\n    endDate: '',\n    allDay: false\n  };\n  var popover;\n  var popoverState = false; // Add event variables\n\n  var eventName;\n  var eventDescription;\n  var eventLocation;\n  var startDatepicker;\n  var startFlatpickr;\n  var endDatepicker;\n  var endFlatpickr;\n  var startTimepicker;\n  var startTimeFlatpickr;\n  var endTimepicker;\n  var endTimeFlatpickr;\n  var modal;\n  var modalTitle;\n  var form;\n  var validator;\n  var addButton;\n  var submitButton;\n  var cancelButton;\n  var closeButton; // View event variables\n\n  var viewEventName;\n  var viewAllDay;\n  var viewEventDescription;\n  var viewEventLocation;\n  var viewStartDate;\n  var viewEndDate;\n  var viewModal;\n  var viewEditButton;\n  var viewDeleteButton; // Private functions\n\n  var initCalendarApp = function initCalendarApp() {\n    // Define variables\n    var calendarEl = document.getElementById('kt_calendar_app');\n    var todayDate = moment().startOf('day');\n    var YM = todayDate.format('YYYY-MM');\n    var YESTERDAY = todayDate.clone().subtract(1, 'day').format('YYYY-MM-DD');\n    var TODAY = todayDate.format('YYYY-MM-DD');\n    var TOMORROW = todayDate.clone().add(1, 'day').format('YYYY-MM-DD'); // Init calendar --- more info: https://fullcalendar.io/docs/initialize-globals\n\n    calendar = new FullCalendar.Calendar(calendarEl, {\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay'\n      },\n      initialDate: TODAY,\n      navLinks: true,\n      // can click day/week names to navigate views\n      selectable: true,\n      selectMirror: true,\n      // Select dates action --- more info: https://fullcalendar.io/docs/select-callback\n      select: function select(arg) {\n        hidePopovers();\n        formatArgs(arg);\n        handleNewEvent();\n      },\n      // Click event --- more info: https://fullcalendar.io/docs/eventClick\n      eventClick: function eventClick(arg) {\n        hidePopovers();\n        formatArgs({\n          id: arg.event.id,\n          title: arg.event.title,\n          description: arg.event.extendedProps.description,\n          location: arg.event.extendedProps.location,\n          startStr: arg.event.startStr,\n          endStr: arg.event.endStr,\n          allDay: arg.event.allDay\n        });\n        handleViewEvent();\n      },\n      // MouseEnter event --- more info: https://fullcalendar.io/docs/eventMouseEnter\n      eventMouseEnter: function eventMouseEnter(arg) {\n        formatArgs({\n          id: arg.event.id,\n          title: arg.event.title,\n          description: arg.event.extendedProps.description,\n          location: arg.event.extendedProps.location,\n          startStr: arg.event.startStr,\n          endStr: arg.event.endStr,\n          allDay: arg.event.allDay\n        }); // Show popover preview\n\n        initPopovers(arg.el);\n      },\n      editable: true,\n      dayMaxEvents: true,\n      // allow \"more\" link when too many events\n      events: [{\n        id: uid(),\n        title: 'All Day Event',\n        start: YM + '-01',\n        end: YM + '-02',\n        description: 'Toto lorem ipsum dolor sit incid idunt ut',\n        className: \"fc-event-danger fc-event-solid-warning\",\n        location: 'Federation Square'\n      }, {\n        id: uid(),\n        title: 'Reporting',\n        start: YM + '-14T13:30:00',\n        description: 'Lorem ipsum dolor incid idunt ut labore',\n        end: YM + '-14T14:30:00',\n        className: \"fc-event-success\",\n        location: 'Meeting Room 7.03'\n      }, {\n        id: uid(),\n        title: 'Company Trip',\n        start: YM + '-02',\n        description: 'Lorem ipsum dolor sit tempor incid',\n        end: YM + '-03',\n        className: \"fc-event-primary\",\n        location: 'Seoul, Korea'\n      }, {\n        id: uid(),\n        title: 'ICT Expo 2021 - Product Release',\n        start: YM + '-03',\n        description: 'Lorem ipsum dolor sit tempor inci',\n        end: YM + '-05',\n        className: \"fc-event-light fc-event-solid-primary\",\n        location: 'Melbourne Exhibition Hall'\n      }, {\n        id: uid(),\n        title: 'Dinner',\n        start: YM + '-12',\n        description: 'Lorem ipsum dolor sit amet, conse ctetur',\n        end: YM + '-13',\n        location: 'Squire\\'s Loft'\n      }, {\n        id: uid(),\n        title: 'Repeating Event',\n        start: YM + '-09T16:00:00',\n        end: YM + '-09T17:00:00',\n        description: 'Lorem ipsum dolor sit ncididunt ut labore',\n        className: \"fc-event-danger\",\n        location: 'General Area'\n      }, {\n        id: uid(),\n        title: 'Repeating Event',\n        description: 'Lorem ipsum dolor sit amet, labore',\n        start: YM + '-16T16:00:00',\n        end: YM + '-16T17:00:00',\n        location: 'General Area'\n      }, {\n        id: uid(),\n        title: 'Conference',\n        start: YESTERDAY,\n        end: TOMORROW,\n        description: 'Lorem ipsum dolor eius mod tempor labore',\n        className: \"fc-event-primary\",\n        location: 'Conference Hall A'\n      }, {\n        id: uid(),\n        title: 'Meeting',\n        start: TODAY + 'T10:30:00',\n        end: TODAY + 'T12:30:00',\n        description: 'Lorem ipsum dolor eiu idunt ut labore',\n        location: 'Meeting Room 11.06'\n      }, {\n        id: uid(),\n        title: 'Lunch',\n        start: TODAY + 'T12:00:00',\n        end: TODAY + 'T14:00:00',\n        className: \"fc-event-info\",\n        description: 'Lorem ipsum dolor sit amet, ut labore',\n        location: 'Cafeteria'\n      }, {\n        id: uid(),\n        title: 'Meeting',\n        start: TODAY + 'T14:30:00',\n        end: TODAY + 'T15:30:00',\n        className: \"fc-event-warning\",\n        description: 'Lorem ipsum conse ctetur adipi scing',\n        location: 'Meeting Room 11.10'\n      }, {\n        id: uid(),\n        title: 'Happy Hour',\n        start: TODAY + 'T17:30:00',\n        end: TODAY + 'T21:30:00',\n        className: \"fc-event-info\",\n        description: 'Lorem ipsum dolor sit amet, conse ctetur',\n        location: 'The English Pub'\n      }, {\n        id: uid(),\n        title: 'Dinner',\n        start: TOMORROW + 'T18:00:00',\n        end: TOMORROW + 'T21:00:00',\n        className: \"fc-event-solid-danger fc-event-light\",\n        description: 'Lorem ipsum dolor sit ctetur adipi scing',\n        location: 'New York Steakhouse'\n      }, {\n        id: uid(),\n        title: 'Birthday Party',\n        start: TOMORROW + 'T12:00:00',\n        end: TOMORROW + 'T14:00:00',\n        className: \"fc-event-primary\",\n        description: 'Lorem ipsum dolor sit amet, scing',\n        location: 'The English Pub'\n      }, {\n        id: uid(),\n        title: 'Site visit',\n        start: YM + '-28',\n        end: YM + '-29',\n        className: \"fc-event-solid-info fc-event-light\",\n        description: 'Lorem ipsum dolor sit amet, labore',\n        location: '271, Spring Street'\n      }]\n    });\n    calendar.render();\n  }; // Initialize popovers --- more info: https://getbootstrap.com/docs/4.0/components/popovers/\n\n\n  var initPopovers = function initPopovers(element) {\n    hidePopovers(); // Generate popover content\n\n    var startDate = data.allDay ? moment(data.startDate).format('Do MMM, YYYY') : moment(data.startDate).format('Do MMM, YYYY - h:mm a');\n    var endDate = data.allDay ? moment(data.endDate).format('Do MMM, YYYY') : moment(data.endDate).format('Do MMM, YYYY - h:mm a');\n    var popoverHtml = '<div class=\"fw-bolder mb-2\">' + data.eventName + '</div><div class=\"fs-7\"><span class=\"fw-bold\">Start:</span> ' + startDate + '</div><div class=\"fs-7 mb-4\"><span class=\"fw-bold\">End:</span> ' + endDate + '</div><div id=\"kt_calendar_event_view_button\" type=\"button\" class=\"btn btn-sm btn-light-primary\">View More</div>'; // Popover options\n\n    var options = {\n      container: 'body',\n      trigger: 'manual',\n      boundary: 'window',\n      placement: 'auto',\n      dismiss: true,\n      html: true,\n      title: 'Event Summary',\n      content: popoverHtml\n    }; // Initialize popover\n\n    popover = KTApp.initBootstrapPopover(element, options); // Show popover\n\n    popover.show(); // Update popover state\n\n    popoverState = true; // Open view event modal\n\n    handleViewButton();\n  }; // Hide active popovers\n\n\n  var hidePopovers = function hidePopovers() {\n    if (popoverState) {\n      popover.dispose();\n      popoverState = false;\n    }\n  }; // Initialize datepickers --- more info: https://flatpickr.js.org/\n\n\n  var initDatepickers = function initDatepickers() {\n    startFlatpickr = flatpickr(startDatepicker, {\n      enableTime: false,\n      dateFormat: \"Y-m-d\"\n    });\n    endFlatpickr = flatpickr(endDatepicker, {\n      enableTime: false,\n      dateFormat: \"Y-m-d\"\n    });\n    startTimeFlatpickr = flatpickr(startTimepicker, {\n      enableTime: true,\n      noCalendar: true,\n      dateFormat: \"H:i\"\n    });\n    endTimeFlatpickr = flatpickr(endTimepicker, {\n      enableTime: true,\n      noCalendar: true,\n      dateFormat: \"H:i\"\n    });\n  }; // Handle add button\n\n\n  var handleAddButton = function handleAddButton() {\n    addButton.addEventListener('click', function (e) {\n      // Reset form data\n      data = {\n        id: '',\n        eventName: '',\n        eventDescription: '',\n        startDate: '',\n        endDate: '',\n        allDay: false\n      };\n      handleNewEvent();\n    });\n  }; // Handle add new event\n\n\n  var handleNewEvent = function handleNewEvent() {\n    // Update modal title\n    modalTitle.innerText = \"Add a New Event\";\n    modal.show(); // Select datepicker wrapper elements\n\n    var datepickerWrappers = form.querySelectorAll('[data-kt-calendar=\"datepicker\"]'); // Handle all day toggle\n\n    var allDayToggle = form.querySelector('#kt_calendar_datepicker_allday');\n    allDayToggle.addEventListener('click', function (e) {\n      if (e.target.checked) {\n        datepickerWrappers.forEach(function (dw) {\n          dw.classList.add('d-none');\n        });\n      } else {\n        endFlatpickr.setDate(data.startDate, true, 'Y-m-d');\n        datepickerWrappers.forEach(function (dw) {\n          dw.classList.remove('d-none');\n        });\n      }\n    });\n    populateForm(data); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    validator = FormValidation.formValidation(form, {\n      fields: {\n        'calendar_event_name': {\n          validators: {\n            notEmpty: {\n              message: 'Event name is required'\n            }\n          }\n        },\n        'calendar_event_start_date': {\n          validators: {\n            notEmpty: {\n              message: 'Start date is required'\n            }\n          }\n        },\n        'calendar_event_end_date': {\n          validators: {\n            notEmpty: {\n              message: 'End date is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }); // Handle submit form\n\n    submitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault(); // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable submit button whilst loading\n\n            submitButton.disabled = true; // Simulate form submission\n\n            setTimeout(function () {\n              // Simulate form submission\n              submitButton.removeAttribute('data-kt-indicator'); // Show popup confirmation \n\n              Swal.fire({\n                text: \"New event added to calendar!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  modal.hide(); // Enable submit button after loading\n\n                  submitButton.disabled = false; // Detect if is all day event\n\n                  var allDayEvent = false;\n\n                  if (allDayToggle.checked) {\n                    allDayEvent = true;\n                  }\n\n                  if (startTimeFlatpickr.selectedDates.length === 0) {\n                    allDayEvent = true;\n                  } // Merge date & time\n\n\n                  var startDateTime = moment(startFlatpickr.selectedDates[0]).format();\n                  var endDateTime = moment(endFlatpickr.selectedDates[endFlatpickr.selectedDates.length - 1]).format();\n\n                  if (!allDayEvent) {\n                    var startDate = moment(startFlatpickr.selectedDates[0]).format('YYYY-MM-DD');\n                    var endDate = startDate;\n                    var startTime = moment(startTimeFlatpickr.selectedDates[0]).format('HH:mm:ss');\n                    var endTime = moment(endTimeFlatpickr.selectedDates[0]).format('HH:mm:ss');\n                    startDateTime = startDate + 'T' + startTime;\n                    endDateTime = endDate + 'T' + endTime;\n                  } // Add new event to calendar\n\n\n                  calendar.addEvent({\n                    id: uid(),\n                    title: eventName.value,\n                    description: eventDescription.value,\n                    location: eventLocation.value,\n                    start: startDateTime,\n                    end: endDateTime,\n                    allDay: allDayEvent\n                  });\n                  calendar.render(); // Reset form for demo purposes only\n\n                  form.reset();\n                }\n              }); //form.submit(); // Submit form\n            }, 2000);\n          } else {\n            // Show popup warning \n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }\n    });\n  }; // Handle edit event\n\n\n  var handleEditEvent = function handleEditEvent() {\n    // Update modal title\n    modalTitle.innerText = \"Edit an Event\";\n    modal.show(); // Select datepicker wrapper elements\n\n    var datepickerWrappers = form.querySelectorAll('[data-kt-calendar=\"datepicker\"]'); // Handle all day toggle\n\n    var allDayToggle = form.querySelector('#kt_calendar_datepicker_allday');\n    allDayToggle.addEventListener('click', function (e) {\n      if (e.target.checked) {\n        datepickerWrappers.forEach(function (dw) {\n          dw.classList.add('d-none');\n        });\n      } else {\n        endFlatpickr.setDate(data.startDate, true, 'Y-m-d');\n        datepickerWrappers.forEach(function (dw) {\n          dw.classList.remove('d-none');\n        });\n      }\n    });\n    populateForm(data); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    validator = FormValidation.formValidation(form, {\n      fields: {\n        'calendar_event_name': {\n          validators: {\n            notEmpty: {\n              message: 'Event name is required'\n            }\n          }\n        },\n        'calendar_event_start_date': {\n          validators: {\n            notEmpty: {\n              message: 'Start date is required'\n            }\n          }\n        },\n        'calendar_event_end_date': {\n          validators: {\n            notEmpty: {\n              message: 'End date is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }); // Handle submit form\n\n    submitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault(); // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable submit button whilst loading\n\n            submitButton.disabled = true; // Simulate form submission\n\n            setTimeout(function () {\n              // Simulate form submission\n              submitButton.removeAttribute('data-kt-indicator'); // Show popup confirmation \n\n              Swal.fire({\n                text: \"New event added to calendar!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  modal.hide(); // Enable submit button after loading\n\n                  submitButton.disabled = false; // Remove old event\n\n                  calendar.getEventById(data.id).remove(); // Detect if is all day event\n\n                  var allDayEvent = false;\n\n                  if (allDayToggle.checked) {\n                    allDayEvent = true;\n                  }\n\n                  if (startTimeFlatpickr.selectedDates.length === 0) {\n                    allDayEvent = true;\n                  } // Merge date & time\n\n\n                  var startDateTime = moment(startFlatpickr.selectedDates[0]).format();\n                  var endDateTime = moment(endFlatpickr.selectedDates[endFlatpickr.selectedDates.length - 1]).format();\n\n                  if (!allDayEvent) {\n                    var startDate = moment(startFlatpickr.selectedDates[0]).format('YYYY-MM-DD');\n                    var endDate = startDate;\n                    var startTime = moment(startTimeFlatpickr.selectedDates[0]).format('HH:mm:ss');\n                    var endTime = moment(endTimeFlatpickr.selectedDates[0]).format('HH:mm:ss');\n                    startDateTime = startDate + 'T' + startTime;\n                    endDateTime = endDate + 'T' + endTime;\n                  } // Add new event to calendar\n\n\n                  calendar.addEvent({\n                    id: uid(),\n                    title: eventName.value,\n                    description: eventDescription.value,\n                    location: eventLocation.value,\n                    start: startDateTime,\n                    end: endDateTime,\n                    allDay: allDayEvent\n                  });\n                  calendar.render(); // Reset form for demo purposes only\n\n                  form.reset();\n                }\n              }); //form.submit(); // Submit form\n            }, 2000);\n          } else {\n            // Show popup warning \n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }\n    });\n  }; // Handle view event\n\n\n  var handleViewEvent = function handleViewEvent() {\n    viewModal.show(); // Detect all day event\n\n    var eventNameMod;\n    var startDateMod;\n    var endDateMod; // Generate labels\n\n    if (data.allDay) {\n      eventNameMod = 'All Day';\n      startDateMod = moment(data.startDate).format('Do MMM, YYYY');\n      endDateMod = moment(data.endDate).format('Do MMM, YYYY');\n    } else {\n      eventNameMod = '';\n      startDateMod = moment(data.startDate).format('Do MMM, YYYY - h:mm a');\n      endDateMod = moment(data.endDate).format('Do MMM, YYYY - h:mm a');\n    } // Populate view data\n\n\n    viewEventName.innerText = data.eventName;\n    viewAllDay.innerText = eventNameMod;\n    viewEventDescription.innerText = data.eventDescription ? data.eventDescription : '--';\n    viewEventLocation.innerText = data.eventLocation ? data.eventLocation : '--';\n    viewStartDate.innerText = startDateMod;\n    viewEndDate.innerText = endDateMod;\n  }; // Handle delete event\n\n\n  var handleDeleteEvent = function handleDeleteEvent() {\n    viewDeleteButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to delete this event?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, delete it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          calendar.getEventById(data.id).remove();\n          viewModal.hide(); // Hide modal\t\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your event was not deleted!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  }; // Handle edit button\n\n\n  var handleEditButton = function handleEditButton() {\n    viewEditButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      viewModal.hide();\n      handleEditEvent();\n    });\n  }; // Handle cancel button\n\n\n  var handleCancelButton = function handleCancelButton() {\n    // Edit event modal cancel button\n    cancelButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\t\n\n          modal.hide(); // Hide modal\t\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  }; // Handle close button\n\n\n  var handleCloseButton = function handleCloseButton() {\n    // Edit event modal close button\n    closeButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\t\n\n          modal.hide(); // Hide modal\t\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  }; // Handle view button\n\n\n  var handleViewButton = function handleViewButton() {\n    var viewButton = document.querySelector('#kt_calendar_event_view_button');\n    viewButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      hidePopovers();\n      handleViewEvent();\n    });\n  }; // Helper functions\n  // Populate form \n\n\n  var populateForm = function populateForm() {\n    eventName.value = data.eventName ? data.eventName : '';\n    eventDescription.value = data.eventDescription ? data.eventDescription : '';\n    eventLocation.value = data.eventLocation ? data.eventLocation : '';\n    startFlatpickr.setDate(data.startDate, true, 'Y-m-d'); // Handle null end dates\n\n    var endDate = data.endDate ? data.endDate : moment(data.startDate).format();\n    endFlatpickr.setDate(endDate, true, 'Y-m-d');\n    var allDayToggle = form.querySelector('#kt_calendar_datepicker_allday');\n    var datepickerWrappers = form.querySelectorAll('[data-kt-calendar=\"datepicker\"]');\n\n    if (data.allDay) {\n      allDayToggle.checked = true;\n      datepickerWrappers.forEach(function (dw) {\n        dw.classList.add('d-none');\n      });\n    } else {\n      startTimeFlatpickr.setDate(data.startDate, true, 'Y-m-d H:i');\n      endTimeFlatpickr.setDate(data.endDate, true, 'Y-m-d H:i');\n      endFlatpickr.setDate(data.startDate, true, 'Y-m-d');\n      allDayToggle.checked = false;\n      datepickerWrappers.forEach(function (dw) {\n        dw.classList.remove('d-none');\n      });\n    }\n  }; // Format FullCalendar reponses\n\n\n  var formatArgs = function formatArgs(res) {\n    data.id = res.id;\n    data.eventName = res.title;\n    data.eventDescription = res.description;\n    data.eventLocation = res.location;\n    data.startDate = res.startStr;\n    data.endDate = res.endStr;\n    data.allDay = res.allDay;\n  }; // Generate unique IDs for events\n\n\n  var uid = function uid() {\n    return Date.now().toString() + Math.floor(Math.random() * 1000).toString();\n  };\n\n  return {\n    // Public Functions\n    init: function init() {\n      // Define variables\n      // Add event modal\n      var element = document.getElementById('kt_modal_add_event');\n      form = element.querySelector('#kt_modal_add_event_form');\n      eventName = form.querySelector('[name=\"calendar_event_name\"]');\n      eventDescription = form.querySelector('[name=\"calendar_event_description\"]');\n      eventLocation = form.querySelector('[name=\"calendar_event_location\"]');\n      startDatepicker = form.querySelector('#kt_calendar_datepicker_start_date');\n      endDatepicker = form.querySelector('#kt_calendar_datepicker_end_date');\n      startTimepicker = form.querySelector('#kt_calendar_datepicker_start_time');\n      endTimepicker = form.querySelector('#kt_calendar_datepicker_end_time');\n      addButton = document.querySelector('[data-kt-calendar=\"add\"]');\n      submitButton = form.querySelector('#kt_modal_add_event_submit');\n      cancelButton = form.querySelector('#kt_modal_add_event_cancel');\n      closeButton = element.querySelector('#kt_modal_add_event_close');\n      modalTitle = form.querySelector('[data-kt-calendar=\"title\"]');\n      modal = new bootstrap.Modal(element); // View event modal\n\n      var viewElement = document.getElementById('kt_modal_view_event');\n      viewModal = new bootstrap.Modal(viewElement);\n      viewEventName = viewElement.querySelector('[data-kt-calendar=\"event_name\"]');\n      viewAllDay = viewElement.querySelector('[data-kt-calendar=\"all_day\"]');\n      viewEventDescription = viewElement.querySelector('[data-kt-calendar=\"event_description\"]');\n      viewEventLocation = viewElement.querySelector('[data-kt-calendar=\"event_location\"]');\n      viewStartDate = viewElement.querySelector('[data-kt-calendar=\"event_start_date\"]');\n      viewEndDate = viewElement.querySelector('[data-kt-calendar=\"event_end_date\"]');\n      viewEditButton = viewElement.querySelector('#kt_modal_view_event_edit');\n      viewDeleteButton = viewElement.querySelector('#kt_modal_view_event_delete');\n      initCalendarApp();\n      initDatepickers();\n      handleEditButton();\n      handleAddButton();\n      handleDeleteEvent();\n      handleCancelButton();\n      handleCloseButton();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTAppCalendar.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL3RoZW1lMS9qcy9jdXN0b20vYXBwcy9jYWxlbmRhci9jYWxlbmRhci5qcy5qcyIsIm1hcHBpbmdzIjoiQ0FFQTs7QUFDQSxJQUFJQSxhQUFhLEdBQUcsWUFBWTtBQUM1QjtBQUNBO0FBQ0EsTUFBSUMsUUFBSjtBQUNBLE1BQUlDLElBQUksR0FBRztBQUNQQyxJQUFBQSxFQUFFLEVBQUUsRUFERztBQUVQQyxJQUFBQSxTQUFTLEVBQUUsRUFGSjtBQUdQQyxJQUFBQSxnQkFBZ0IsRUFBRSxFQUhYO0FBSVBDLElBQUFBLGFBQWEsRUFBRSxFQUpSO0FBS1BDLElBQUFBLFNBQVMsRUFBRSxFQUxKO0FBTVBDLElBQUFBLE9BQU8sRUFBRSxFQU5GO0FBT1BDLElBQUFBLE1BQU0sRUFBRTtBQVBELEdBQVg7QUFTQSxNQUFJQyxPQUFKO0FBQ0EsTUFBSUMsWUFBWSxHQUFHLEtBQW5CLENBZDRCLENBZ0I1Qjs7QUFDQSxNQUFJUCxTQUFKO0FBQ0EsTUFBSUMsZ0JBQUo7QUFDQSxNQUFJQyxhQUFKO0FBQ0EsTUFBSU0sZUFBSjtBQUNBLE1BQUlDLGNBQUo7QUFDQSxNQUFJQyxhQUFKO0FBQ0EsTUFBSUMsWUFBSjtBQUNBLE1BQUlDLGVBQUo7QUFDQSxNQUFJQyxrQkFBSjtBQUNBLE1BQUlDLGFBQUo7QUFDQSxNQUFJQyxnQkFBSjtBQUNBLE1BQUlDLEtBQUo7QUFDQSxNQUFJQyxVQUFKO0FBQ0EsTUFBSUMsSUFBSjtBQUNBLE1BQUlDLFNBQUo7QUFDQSxNQUFJQyxTQUFKO0FBQ0EsTUFBSUMsWUFBSjtBQUNBLE1BQUlDLFlBQUo7QUFDQSxNQUFJQyxXQUFKLENBbkM0QixDQXFDNUI7O0FBQ0EsTUFBSUMsYUFBSjtBQUNBLE1BQUlDLFVBQUo7QUFDQSxNQUFJQyxvQkFBSjtBQUNBLE1BQUlDLGlCQUFKO0FBQ0EsTUFBSUMsYUFBSjtBQUNBLE1BQUlDLFdBQUo7QUFDQSxNQUFJQyxTQUFKO0FBQ0EsTUFBSUMsY0FBSjtBQUNBLE1BQUlDLGdCQUFK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QXZCO0FBQ0FuRixNQUFBQSxpQkFBaUIsR0FBRzZKLFdBQVcsQ0FBQzFFLGFBQVosQ0FBMEIscUNBQTFCLENBQXBCO0FBQ0FsRixNQUFBQSxhQUFhLEdBQUc0SixXQUFXLENBQUMxRSxhQUFaLENBQTBCLHVDQUExQixDQUFoQjtBQUNBakYsTUFBQUEsV0FBVyxHQUFHMkosV0FBVyxDQUFDMUUsYUFBWixDQUEwQixxQ0FBMUIsQ0FBZDtBQUNBL0UsTUFBQUEsY0FBYyxHQUFHeUosV0FBVyxDQUFDMUUsYUFBWixDQUEwQiwyQkFBMUIsQ0FBakI7QUFDQTlFLE1BQUFBLGdCQUFnQixHQUFHd0osV0FBVyxDQUFDMUUsYUFBWixDQUEwQiw2QkFBMUIsQ0FBbkI7QUFFQTdFLE1BQUFBLGVBQWU7QUFDZmlFLE1BQUFBLGVBQWU7QUFDZnlFLE1BQUFBLGdCQUFnQjtBQUNoQnBFLE1BQUFBLGVBQWU7QUFDZmlFLE1BQUFBLGlCQUFpQjtBQUNqQkksTUFBQUEsa0JBQWtCO0FBQ2xCQyxNQUFBQSxpQkFBaUI7QUFDcEI7QUF4Q0UsR0FBUDtBQTBDSCxDQXQ0Qm1CLEVBQXBCLEMsQ0F3NEJBOzs7QUFDQVksTUFBTSxDQUFDQyxrQkFBUCxDQUEwQixZQUFZO0FBQ2xDOUwsRUFBQUEsYUFBYSxDQUFDMEwsSUFBZDtBQUNILENBRkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL3RoZW1lMS9qcy9jdXN0b20vYXBwcy9jYWxlbmRhci9jYWxlbmRhci5qcz83ZDA1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLy8gQ2xhc3MgZGVmaW5pdGlvblxyXG52YXIgS1RBcHBDYWxlbmRhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIFNoYXJlZCB2YXJpYWJsZXNcclxuICAgIC8vIENhbGVuZGFyIHZhcmlhYmxlc1xyXG4gICAgdmFyIGNhbGVuZGFyO1xyXG4gICAgdmFyIGRhdGEgPSB7XHJcbiAgICAgICAgaWQ6ICcnLFxyXG4gICAgICAgIGV2ZW50TmFtZTogJycsXHJcbiAgICAgICAgZXZlbnREZXNjcmlwdGlvbjogJycsXHJcbiAgICAgICAgZXZlbnRMb2NhdGlvbjogJycsXHJcbiAgICAgICAgc3RhcnREYXRlOiAnJyxcclxuICAgICAgICBlbmREYXRlOiAnJyxcclxuICAgICAgICBhbGxEYXk6IGZhbHNlXHJcbiAgICB9O1xyXG4gICAgdmFyIHBvcG92ZXI7XHJcbiAgICB2YXIgcG9wb3ZlclN0YXRlID0gZmFsc2U7XHJcblxyXG4gICAgLy8gQWRkIGV2ZW50IHZhcmlhYmxlc1xyXG4gICAgdmFyIGV2ZW50TmFtZTtcclxuICAgIHZhciBldmVudERlc2NyaXB0aW9uO1xyXG4gICAgdmFyIGV2ZW50TG9jYXRpb247XHJcbiAgICB2YXIgc3RhcnREYXRlcGlja2VyO1xyXG4gICAgdmFyIHN0YXJ0RmxhdHBpY2tyO1xyXG4gICAgdmFyIGVuZERhdGVwaWNrZXI7XHJcbiAgICB2YXIgZW5kRmxhdHBpY2tyO1xyXG4gICAgdmFyIHN0YXJ0VGltZXBpY2tlcjtcclxuICAgIHZhciBzdGFydFRpbWVGbGF0cGlja3I7XHJcbiAgICB2YXIgZW5kVGltZXBpY2tlclxyXG4gICAgdmFyIGVuZFRpbWVGbGF0cGlja3I7XHJcbiAgICB2YXIgbW9kYWw7XHJcbiAgICB2YXIgbW9kYWxUaXRsZTtcclxuICAgIHZhciBmb3JtO1xyXG4gICAgdmFyIHZhbGlkYXRvcjtcclxuICAgIHZhciBhZGRCdXR0b247XHJcbiAgICB2YXIgc3VibWl0QnV0dG9uO1xyXG4gICAgdmFyIGNhbmNlbEJ1dHRvbjtcclxuICAgIHZhciBjbG9zZUJ1dHRvbjtcclxuXHJcbiAgICAvLyBWaWV3IGV2ZW50IHZhcmlhYmxlc1xyXG4gICAgdmFyIHZpZXdFdmVudE5hbWU7XHJcbiAgICB2YXIgdmlld0FsbERheTtcclxuICAgIHZhciB2aWV3RXZlbnREZXNjcmlwdGlvbjtcclxuICAgIHZhciB2aWV3RXZlbnRMb2NhdGlvbjtcclxuICAgIHZhciB2aWV3U3RhcnREYXRlO1xyXG4gICAgdmFyIHZpZXdFbmREYXRlO1xyXG4gICAgdmFyIHZpZXdNb2RhbDtcclxuICAgIHZhciB2aWV3RWRpdEJ1dHRvbjtcclxuICAgIHZhciB2aWV3RGVsZXRlQnV0dG9uO1xyXG5cclxuXHJcbiAgICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG4gICAgdmFyIGluaXRDYWxlbmRhckFwcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBEZWZpbmUgdmFyaWFibGVzXHJcbiAgICAgICAgdmFyIGNhbGVuZGFyRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgna3RfY2FsZW5kYXJfYXBwJyk7XHJcbiAgICAgICAgdmFyIHRvZGF5RGF0ZSA9IG1vbWVudCgpLnN0YXJ0T2YoJ2RheScpO1xyXG4gICAgICAgIHZhciBZTSA9IHRvZGF5RGF0ZS5mb3JtYXQoJ1lZWVktTU0nKTtcclxuICAgICAgICB2YXIgWUVTVEVSREFZID0gdG9kYXlEYXRlLmNsb25lKCkuc3VidHJhY3QoMSwgJ2RheScpLmZvcm1hdCgnWVlZWS1NTS1ERCcpO1xyXG4gICAgICAgIHZhciBUT0RBWSA9IHRvZGF5RGF0ZS5mb3JtYXQoJ1lZWVktTU0tREQnKTtcclxuICAgICAgICB2YXIgVE9NT1JST1cgPSB0b2RheURhdGUuY2xvbmUoKS5hZGQoMSwgJ2RheScpLmZvcm1hdCgnWVlZWS1NTS1ERCcpO1xyXG5cclxuICAgICAgICAvLyBJbml0IGNhbGVuZGFyIC0tLSBtb3JlIGluZm86IGh0dHBzOi8vZnVsbGNhbGVuZGFyLmlvL2RvY3MvaW5pdGlhbGl6ZS1nbG9iYWxzXHJcbiAgICAgICAgY2FsZW5kYXIgPSBuZXcgRnVsbENhbGVuZGFyLkNhbGVuZGFyKGNhbGVuZGFyRWwsIHtcclxuICAgICAgICAgICAgaGVhZGVyVG9vbGJhcjoge1xyXG4gICAgICAgICAgICAgICAgbGVmdDogJ3ByZXYsbmV4dCB0b2RheScsXHJcbiAgICAgICAgICAgICAgICBjZW50ZXI6ICd0aXRsZScsXHJcbiAgICAgICAgICAgICAgICByaWdodDogJ2RheUdyaWRNb250aCx0aW1lR3JpZFdlZWssdGltZUdyaWREYXknXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGluaXRpYWxEYXRlOiBUT0RBWSxcclxuICAgICAgICAgICAgbmF2TGlua3M6IHRydWUsIC8vIGNhbiBjbGljayBkYXkvd2VlayBuYW1lcyB0byBuYXZpZ2F0ZSB2aWV3c1xyXG4gICAgICAgICAgICBzZWxlY3RhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBzZWxlY3RNaXJyb3I6IHRydWUsXHJcblxyXG4gICAgICAgICAgICAvLyBTZWxlY3QgZGF0ZXMgYWN0aW9uIC0tLSBtb3JlIGluZm86IGh0dHBzOi8vZnVsbGNhbGVuZGFyLmlvL2RvY3Mvc2VsZWN0LWNhbGxiYWNrXHJcbiAgICAgICAgICAgIHNlbGVjdDogZnVuY3Rpb24gKGFyZykge1xyXG4gICAgICAgICAgICAgICAgaGlkZVBvcG92ZXJzKCk7XHJcbiAgICAgICAgICAgICAgICBmb3JtYXRBcmdzKGFyZyk7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVOZXdFdmVudCgpO1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgLy8gQ2xpY2sgZXZlbnQgLS0tIG1vcmUgaW5mbzogaHR0cHM6Ly9mdWxsY2FsZW5kYXIuaW8vZG9jcy9ldmVudENsaWNrXHJcbiAgICAgICAgICAgIGV2ZW50Q2xpY2s6IGZ1bmN0aW9uIChhcmcpIHtcclxuICAgICAgICAgICAgICAgIGhpZGVQb3BvdmVycygpO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvcm1hdEFyZ3Moe1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBhcmcuZXZlbnQuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGFyZy5ldmVudC50aXRsZSxcclxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYXJnLmV2ZW50LmV4dGVuZGVkUHJvcHMuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGFyZy5ldmVudC5leHRlbmRlZFByb3BzLmxvY2F0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0U3RyOiBhcmcuZXZlbnQuc3RhcnRTdHIsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kU3RyOiBhcmcuZXZlbnQuZW5kU3RyLFxyXG4gICAgICAgICAgICAgICAgICAgIGFsbERheTogYXJnLmV2ZW50LmFsbERheVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVWaWV3RXZlbnQoKTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIC8vIE1vdXNlRW50ZXIgZXZlbnQgLS0tIG1vcmUgaW5mbzogaHR0cHM6Ly9mdWxsY2FsZW5kYXIuaW8vZG9jcy9ldmVudE1vdXNlRW50ZXJcclxuICAgICAgICAgICAgZXZlbnRNb3VzZUVudGVyOiBmdW5jdGlvbiAoYXJnKSB7XHJcbiAgICAgICAgICAgICAgICBmb3JtYXRBcmdzKHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogYXJnLmV2ZW50LmlkLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBhcmcuZXZlbnQudGl0bGUsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGFyZy5ldmVudC5leHRlbmRlZFByb3BzLmRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBhcmcuZXZlbnQuZXh0ZW5kZWRQcm9wcy5sb2NhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICBzdGFydFN0cjogYXJnLmV2ZW50LnN0YXJ0U3RyLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZFN0cjogYXJnLmV2ZW50LmVuZFN0cixcclxuICAgICAgICAgICAgICAgICAgICBhbGxEYXk6IGFyZy5ldmVudC5hbGxEYXlcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFNob3cgcG9wb3ZlciBwcmV2aWV3XHJcbiAgICAgICAgICAgICAgICBpbml0UG9wb3ZlcnMoYXJnLmVsKTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIGVkaXRhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBkYXlNYXhFdmVudHM6IHRydWUsIC8vIGFsbG93IFwibW9yZVwiIGxpbmsgd2hlbiB0b28gbWFueSBldmVudHNcclxuICAgICAgICAgICAgZXZlbnRzOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnQWxsIERheSBFdmVudCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFlNICsgJy0wMScsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBZTSArICctMDInLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnVG90byBsb3JlbSBpcHN1bSBkb2xvciBzaXQgaW5jaWQgaWR1bnQgdXQnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJmYy1ldmVudC1kYW5nZXIgZmMtZXZlbnQtc29saWQtd2FybmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnRmVkZXJhdGlvbiBTcXVhcmUnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB1aWQoKSxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1JlcG9ydGluZycsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFlNICsgJy0xNFQxMzozMDowMCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBpbmNpZCBpZHVudCB1dCBsYWJvcmUnLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZDogWU0gKyAnLTE0VDE0OjMwOjAwJyxcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiZmMtZXZlbnQtc3VjY2Vzc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnTWVldGluZyBSb29tIDcuMDMnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB1aWQoKSxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0NvbXBhbnkgVHJpcCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFlNICsgJy0wMicsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgdGVtcG9yIGluY2lkJyxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6IFlNICsgJy0wMycsXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcImZjLWV2ZW50LXByaW1hcnlcIixcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogJ1Nlb3VsLCBLb3JlYSdcclxuXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB1aWQoKSxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0lDVCBFeHBvIDIwMjEgLSBQcm9kdWN0IFJlbGVhc2UnLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBZTSArICctMDMnLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IHRlbXBvciBpbmNpJyxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6IFlNICsgJy0wNScsXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcImZjLWV2ZW50LWxpZ2h0IGZjLWV2ZW50LXNvbGlkLXByaW1hcnlcIixcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogJ01lbGJvdXJuZSBFeGhpYml0aW9uIEhhbGwnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB1aWQoKSxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0Rpbm5lcicsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFlNICsgJy0xMicsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2UgY3RldHVyJyxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6IFlNICsgJy0xMycsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246ICdTcXVpcmVcXCdzIExvZnQnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB1aWQoKSxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1JlcGVhdGluZyBFdmVudCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFlNICsgJy0wOVQxNjowMDowMCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBZTSArICctMDlUMTc6MDA6MDAnLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IG5jaWRpZHVudCB1dCBsYWJvcmUnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJmYy1ldmVudC1kYW5nZXJcIixcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogJ0dlbmVyYWwgQXJlYSdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnUmVwZWF0aW5nIEV2ZW50JyxcclxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBsYWJvcmUnLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBZTSArICctMTZUMTY6MDA6MDAnLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZDogWU0gKyAnLTE2VDE3OjAwOjAwJyxcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogJ0dlbmVyYWwgQXJlYSdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnQ29uZmVyZW5jZScsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFlFU1RFUkRBWSxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6IFRPTU9SUk9XLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnTG9yZW0gaXBzdW0gZG9sb3IgZWl1cyBtb2QgdGVtcG9yIGxhYm9yZScsXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcImZjLWV2ZW50LXByaW1hcnlcIixcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogJ0NvbmZlcmVuY2UgSGFsbCBBJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogdWlkKCksXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdNZWV0aW5nJyxcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogVE9EQVkgKyAnVDEwOjMwOjAwJyxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6IFRPREFZICsgJ1QxMjozMDowMCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBlaXUgaWR1bnQgdXQgbGFib3JlJyxcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogJ01lZXRpbmcgUm9vbSAxMS4wNidcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnTHVuY2gnLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBUT0RBWSArICdUMTI6MDA6MDAnLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZDogVE9EQVkgKyAnVDE0OjAwOjAwJyxcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiZmMtZXZlbnQtaW5mb1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIHV0IGxhYm9yZScsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246ICdDYWZldGVyaWEnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB1aWQoKSxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ01lZXRpbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBUT0RBWSArICdUMTQ6MzA6MDAnLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZDogVE9EQVkgKyAnVDE1OjMwOjAwJyxcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiZmMtZXZlbnQtd2FybmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnTG9yZW0gaXBzdW0gY29uc2UgY3RldHVyIGFkaXBpIHNjaW5nJyxcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogJ01lZXRpbmcgUm9vbSAxMS4xMCdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnSGFwcHkgSG91cicsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFRPREFZICsgJ1QxNzozMDowMCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBUT0RBWSArICdUMjE6MzA6MDAnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJmYy1ldmVudC1pbmZvXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2UgY3RldHVyJyxcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogJ1RoZSBFbmdsaXNoIFB1YidcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRGlubmVyJyxcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogVE9NT1JST1cgKyAnVDE4OjAwOjAwJyxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6IFRPTU9SUk9XICsgJ1QyMTowMDowMCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcImZjLWV2ZW50LXNvbGlkLWRhbmdlciBmYy1ldmVudC1saWdodFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGN0ZXR1ciBhZGlwaSBzY2luZycsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246ICdOZXcgWW9yayBTdGVha2hvdXNlJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogdWlkKCksXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdCaXJ0aGRheSBQYXJ0eScsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFRPTU9SUk9XICsgJ1QxMjowMDowMCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBUT01PUlJPVyArICdUMTQ6MDA6MDAnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJmYy1ldmVudC1wcmltYXJ5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgc2NpbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnVGhlIEVuZ2xpc2ggUHViJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogdWlkKCksXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdTaXRlIHZpc2l0JyxcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogWU0gKyAnLTI4JyxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6IFlNICsgJy0yOScsXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcImZjLWV2ZW50LXNvbGlkLWluZm8gZmMtZXZlbnQtbGlnaHRcIixcclxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBsYWJvcmUnLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnMjcxLCBTcHJpbmcgU3RyZWV0J1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNhbGVuZGFyLnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEluaXRpYWxpemUgcG9wb3ZlcnMgLS0tIG1vcmUgaW5mbzogaHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvNC4wL2NvbXBvbmVudHMvcG9wb3ZlcnMvXHJcbiAgICBjb25zdCBpbml0UG9wb3ZlcnMgPSAoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgIGhpZGVQb3BvdmVycygpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEdlbmVyYXRlIHBvcG92ZXIgY29udGVudFxyXG4gICAgICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IGRhdGEuYWxsRGF5ID8gbW9tZW50KGRhdGEuc3RhcnREYXRlKS5mb3JtYXQoJ0RvIE1NTSwgWVlZWScpIDogbW9tZW50KGRhdGEuc3RhcnREYXRlKS5mb3JtYXQoJ0RvIE1NTSwgWVlZWSAtIGg6bW0gYScpO1xyXG4gICAgICAgIGNvbnN0IGVuZERhdGUgPSBkYXRhLmFsbERheSA/IG1vbWVudChkYXRhLmVuZERhdGUpLmZvcm1hdCgnRG8gTU1NLCBZWVlZJykgOiBtb21lbnQoZGF0YS5lbmREYXRlKS5mb3JtYXQoJ0RvIE1NTSwgWVlZWSAtIGg6bW0gYScpO1xyXG4gICAgICAgIGNvbnN0IHBvcG92ZXJIdG1sID0gJzxkaXYgY2xhc3M9XCJmdy1ib2xkZXIgbWItMlwiPicgKyBkYXRhLmV2ZW50TmFtZSArICc8L2Rpdj48ZGl2IGNsYXNzPVwiZnMtN1wiPjxzcGFuIGNsYXNzPVwiZnctYm9sZFwiPlN0YXJ0Ojwvc3Bhbj4gJyArIHN0YXJ0RGF0ZSArICc8L2Rpdj48ZGl2IGNsYXNzPVwiZnMtNyBtYi00XCI+PHNwYW4gY2xhc3M9XCJmdy1ib2xkXCI+RW5kOjwvc3Bhbj4gJyArIGVuZERhdGUgKyAnPC9kaXY+PGRpdiBpZD1cImt0X2NhbGVuZGFyX2V2ZW50X3ZpZXdfYnV0dG9uXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGlnaHQtcHJpbWFyeVwiPlZpZXcgTW9yZTwvZGl2Pic7XHJcblxyXG4gICAgICAgIC8vIFBvcG92ZXIgb3B0aW9uc1xyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBjb250YWluZXI6ICdib2R5JyxcclxuICAgICAgICAgICAgdHJpZ2dlcjogJ21hbnVhbCcsXHJcbiAgICAgICAgICAgIGJvdW5kYXJ5OiAnd2luZG93JyxcclxuICAgICAgICAgICAgcGxhY2VtZW50OiAnYXV0bycsXHJcbiAgICAgICAgICAgIGRpc21pc3M6IHRydWUsXHJcbiAgICAgICAgICAgIGh0bWw6IHRydWUsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnRXZlbnQgU3VtbWFyeScsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IHBvcG92ZXJIdG1sLFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBwb3BvdmVyXHJcbiAgICAgICAgcG9wb3ZlciA9IEtUQXBwLmluaXRCb290c3RyYXBQb3BvdmVyKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAvLyBTaG93IHBvcG92ZXJcclxuICAgICAgICBwb3BvdmVyLnNob3coKTtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIHBvcG92ZXIgc3RhdGVcclxuICAgICAgICBwb3BvdmVyU3RhdGUgPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyBPcGVuIHZpZXcgZXZlbnQgbW9kYWxcclxuICAgICAgICBoYW5kbGVWaWV3QnV0dG9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGlkZSBhY3RpdmUgcG9wb3ZlcnNcclxuICAgIGNvbnN0IGhpZGVQb3BvdmVycyA9ICgpID0+IHtcclxuICAgICAgICBpZiAocG9wb3ZlclN0YXRlKSB7XHJcbiAgICAgICAgICAgIHBvcG92ZXIuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICBwb3BvdmVyU3RhdGUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSW5pdGlhbGl6ZSBkYXRlcGlja2VycyAtLS0gbW9yZSBpbmZvOiBodHRwczovL2ZsYXRwaWNrci5qcy5vcmcvXHJcbiAgICBjb25zdCBpbml0RGF0ZXBpY2tlcnMgPSAoKSA9PiB7XHJcbiAgICAgICAgc3RhcnRGbGF0cGlja3IgPSBmbGF0cGlja3Ioc3RhcnREYXRlcGlja2VyLCB7XHJcbiAgICAgICAgICAgIGVuYWJsZVRpbWU6IGZhbHNlLFxyXG4gICAgICAgICAgICBkYXRlRm9ybWF0OiBcIlktbS1kXCIsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGVuZEZsYXRwaWNrciA9IGZsYXRwaWNrcihlbmREYXRlcGlja2VyLCB7XHJcbiAgICAgICAgICAgIGVuYWJsZVRpbWU6IGZhbHNlLFxyXG4gICAgICAgICAgICBkYXRlRm9ybWF0OiBcIlktbS1kXCIsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHN0YXJ0VGltZUZsYXRwaWNrciA9IGZsYXRwaWNrcihzdGFydFRpbWVwaWNrZXIsIHtcclxuICAgICAgICAgICAgZW5hYmxlVGltZTogdHJ1ZSxcclxuICAgICAgICAgICAgbm9DYWxlbmRhcjogdHJ1ZSxcclxuICAgICAgICAgICAgZGF0ZUZvcm1hdDogXCJIOmlcIixcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZW5kVGltZUZsYXRwaWNrciA9IGZsYXRwaWNrcihlbmRUaW1lcGlja2VyLCB7XHJcbiAgICAgICAgICAgIGVuYWJsZVRpbWU6IHRydWUsXHJcbiAgICAgICAgICAgIG5vQ2FsZW5kYXI6IHRydWUsXHJcbiAgICAgICAgICAgIGRhdGVGb3JtYXQ6IFwiSDppXCIsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGFuZGxlIGFkZCBidXR0b25cclxuICAgIGNvbnN0IGhhbmRsZUFkZEJ1dHRvbiA9ICgpID0+IHtcclxuICAgICAgICBhZGRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcclxuICAgICAgICAgICAgLy8gUmVzZXQgZm9ybSBkYXRhXHJcbiAgICAgICAgICAgIGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBpZDogJycsXHJcbiAgICAgICAgICAgICAgICBldmVudE5hbWU6ICcnLFxyXG4gICAgICAgICAgICAgICAgZXZlbnREZXNjcmlwdGlvbjogJycsXHJcbiAgICAgICAgICAgICAgICBzdGFydERhdGU6ICcnLFxyXG4gICAgICAgICAgICAgICAgZW5kRGF0ZTogJycsXHJcbiAgICAgICAgICAgICAgICBhbGxEYXk6IGZhbHNlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGhhbmRsZU5ld0V2ZW50KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGFuZGxlIGFkZCBuZXcgZXZlbnRcclxuICAgIGNvbnN0IGhhbmRsZU5ld0V2ZW50ID0gKCkgPT4ge1xyXG4gICAgICAgIC8vIFVwZGF0ZSBtb2RhbCB0aXRsZVxyXG4gICAgICAgIG1vZGFsVGl0bGUuaW5uZXJUZXh0ID0gXCJBZGQgYSBOZXcgRXZlbnRcIjtcclxuXHJcbiAgICAgICAgbW9kYWwuc2hvdygpO1xyXG5cclxuICAgICAgICAvLyBTZWxlY3QgZGF0ZXBpY2tlciB3cmFwcGVyIGVsZW1lbnRzXHJcbiAgICAgICAgY29uc3QgZGF0ZXBpY2tlcldyYXBwZXJzID0gZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1rdC1jYWxlbmRhcj1cImRhdGVwaWNrZXJcIl0nKTtcclxuXHJcbiAgICAgICAgLy8gSGFuZGxlIGFsbCBkYXkgdG9nZ2xlXHJcbiAgICAgICAgY29uc3QgYWxsRGF5VG9nZ2xlID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcja3RfY2FsZW5kYXJfZGF0ZXBpY2tlcl9hbGxkYXknKTtcclxuICAgICAgICBhbGxEYXlUb2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcclxuICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgIGRhdGVwaWNrZXJXcmFwcGVycy5mb3JFYWNoKGR3ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBkdy5jbGFzc0xpc3QuYWRkKCdkLW5vbmUnKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZW5kRmxhdHBpY2tyLnNldERhdGUoZGF0YS5zdGFydERhdGUsIHRydWUsICdZLW0tZCcpO1xyXG4gICAgICAgICAgICAgICAgZGF0ZXBpY2tlcldyYXBwZXJzLmZvckVhY2goZHcgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGR3LmNsYXNzTGlzdC5yZW1vdmUoJ2Qtbm9uZScpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcG9wdWxhdGVGb3JtKGRhdGEpO1xyXG5cclxuICAgICAgICAvLyBJbml0IGZvcm0gdmFsaWRhdGlvbiBydWxlcy4gRm9yIG1vcmUgaW5mbyBjaGVjayB0aGUgRm9ybVZhbGlkYXRpb24gcGx1Z2luJ3Mgb2ZmaWNpYWwgZG9jdW1lbnRhdGlvbjpodHRwczovL2Zvcm12YWxpZGF0aW9uLmlvL1xyXG4gICAgICAgIHZhbGlkYXRvciA9IEZvcm1WYWxpZGF0aW9uLmZvcm1WYWxpZGF0aW9uKFxyXG4gICAgICAgICAgICBmb3JtLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmaWVsZHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAnY2FsZW5kYXJfZXZlbnRfbmFtZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90RW1wdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRXZlbnQgbmFtZSBpcyByZXF1aXJlZCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgJ2NhbGVuZGFyX2V2ZW50X3N0YXJ0X2RhdGUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdEVtcHR5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1N0YXJ0IGRhdGUgaXMgcmVxdWlyZWQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICdjYWxlbmRhcl9ldmVudF9lbmRfZGF0ZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90RW1wdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRW5kIGRhdGUgaXMgcmVxdWlyZWQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIHBsdWdpbnM6IHtcclxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5UcmlnZ2VyKCksXHJcbiAgICAgICAgICAgICAgICAgICAgYm9vdHN0cmFwOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5Cb290c3RyYXA1KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93U2VsZWN0b3I6ICcuZnYtcm93JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlSW52YWxpZENsYXNzOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlVmFsaWRDbGFzczogJydcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gSGFuZGxlIHN1Ym1pdCBmb3JtXHJcbiAgICAgICAgc3VibWl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgLy8gUHJldmVudCBkZWZhdWx0IGJ1dHRvbiBhY3Rpb25cclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgLy8gVmFsaWRhdGUgZm9ybSBiZWZvcmUgc3VibWl0XHJcbiAgICAgICAgICAgIGlmICh2YWxpZGF0b3IpIHtcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRvci52YWxpZGF0ZSgpLnRoZW4oZnVuY3Rpb24gKHN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd2YWxpZGF0ZWQhJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gJ1ZhbGlkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaG93IGxvYWRpbmcgaW5kaWNhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLWt0LWluZGljYXRvcicsICdvbicpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlzYWJsZSBzdWJtaXQgYnV0dG9uIHdoaWxzdCBsb2FkaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW11bGF0ZSBmb3JtIHN1Ym1pc3Npb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW11bGF0ZSBmb3JtIHN1Ym1pc3Npb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEta3QtaW5kaWNhdG9yJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2hvdyBwb3B1cCBjb25maXJtYXRpb24gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiTmV3IGV2ZW50IGFkZGVkIHRvIGNhbGVuZGFyIVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwic3VjY2Vzc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJPaywgZ290IGl0IVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGJ0bi1wcmltYXJ5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmlzQ29uZmlybWVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLmhpZGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVuYWJsZSBzdWJtaXQgYnV0dG9uIGFmdGVyIGxvYWRpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXRlY3QgaWYgaXMgYWxsIGRheSBldmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYWxsRGF5RXZlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsbERheVRvZ2dsZS5jaGVja2VkKSB7IGFsbERheUV2ZW50ID0gdHJ1ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRUaW1lRmxhdHBpY2tyLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAwKSB7IGFsbERheUV2ZW50ID0gdHJ1ZTsgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWVyZ2UgZGF0ZSAmIHRpbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0RGF0ZVRpbWUgPSBtb21lbnQoc3RhcnRGbGF0cGlja3Iuc2VsZWN0ZWREYXRlc1swXSkuZm9ybWF0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbmREYXRlVGltZSA9IG1vbWVudChlbmRGbGF0cGlja3Iuc2VsZWN0ZWREYXRlc1tlbmRGbGF0cGlja3Iuc2VsZWN0ZWREYXRlcy5sZW5ndGggLSAxXSkuZm9ybWF0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYWxsRGF5RXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IG1vbWVudChzdGFydEZsYXRwaWNrci5zZWxlY3RlZERhdGVzWzBdKS5mb3JtYXQoJ1lZWVktTU0tREQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZERhdGUgPSBzdGFydERhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBtb21lbnQoc3RhcnRUaW1lRmxhdHBpY2tyLnNlbGVjdGVkRGF0ZXNbMF0pLmZvcm1hdCgnSEg6bW06c3MnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZFRpbWUgPSBtb21lbnQoZW5kVGltZUZsYXRwaWNrci5zZWxlY3RlZERhdGVzWzBdKS5mb3JtYXQoJ0hIOm1tOnNzJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnREYXRlVGltZSA9IHN0YXJ0RGF0ZSArICdUJyArIHN0YXJ0VGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZERhdGVUaW1lID0gZW5kRGF0ZSArICdUJyArIGVuZFRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBuZXcgZXZlbnQgdG8gY2FsZW5kYXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXIuYWRkRXZlbnQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGV2ZW50TmFtZS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBldmVudERlc2NyaXB0aW9uLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGV2ZW50TG9jYXRpb24udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogc3RhcnREYXRlVGltZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogZW5kRGF0ZVRpbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxEYXk6IGFsbERheUV2ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhci5yZW5kZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IGZvcm0gZm9yIGRlbW8gcHVycG9zZXMgb25seVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLnJlc2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9mb3JtLnN1Ym1pdCgpOyAvLyBTdWJtaXQgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAyMDAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaG93IHBvcHVwIHdhcm5pbmcgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIlNvcnJ5LCBsb29rcyBsaWtlIHRoZXJlIGFyZSBzb21lIGVycm9ycyBkZXRlY3RlZCwgcGxlYXNlIHRyeSBhZ2Fpbi5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwiZXJyb3JcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGJ0bi1wcmltYXJ5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBIYW5kbGUgZWRpdCBldmVudFxyXG4gICAgY29uc3QgaGFuZGxlRWRpdEV2ZW50ID0gKCkgPT4ge1xyXG4gICAgICAgIC8vIFVwZGF0ZSBtb2RhbCB0aXRsZVxyXG4gICAgICAgIG1vZGFsVGl0bGUuaW5uZXJUZXh0ID0gXCJFZGl0IGFuIEV2ZW50XCI7XHJcblxyXG4gICAgICAgIG1vZGFsLnNob3coKTtcclxuXHJcbiAgICAgICAgLy8gU2VsZWN0IGRhdGVwaWNrZXIgd3JhcHBlciBlbGVtZW50c1xyXG4gICAgICAgIGNvbnN0IGRhdGVwaWNrZXJXcmFwcGVycyA9IGZvcm0ucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEta3QtY2FsZW5kYXI9XCJkYXRlcGlja2VyXCJdJyk7XHJcblxyXG4gICAgICAgIC8vIEhhbmRsZSBhbGwgZGF5IHRvZ2dsZVxyXG4gICAgICAgIGNvbnN0IGFsbERheVRvZ2dsZSA9IGZvcm0ucXVlcnlTZWxlY3RvcignI2t0X2NhbGVuZGFyX2RhdGVwaWNrZXJfYWxsZGF5Jyk7XHJcbiAgICAgICAgYWxsRGF5VG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlLnRhcmdldC5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRlcGlja2VyV3JhcHBlcnMuZm9yRWFjaChkdyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHcuY2xhc3NMaXN0LmFkZCgnZC1ub25lJyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVuZEZsYXRwaWNrci5zZXREYXRlKGRhdGEuc3RhcnREYXRlLCB0cnVlLCAnWS1tLWQnKTtcclxuICAgICAgICAgICAgICAgIGRhdGVwaWNrZXJXcmFwcGVycy5mb3JFYWNoKGR3ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBkdy5jbGFzc0xpc3QucmVtb3ZlKCdkLW5vbmUnKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHBvcHVsYXRlRm9ybShkYXRhKTtcclxuXHJcbiAgICAgICAgLy8gSW5pdCBmb3JtIHZhbGlkYXRpb24gcnVsZXMuIEZvciBtb3JlIGluZm8gY2hlY2sgdGhlIEZvcm1WYWxpZGF0aW9uIHBsdWdpbidzIG9mZmljaWFsIGRvY3VtZW50YXRpb246aHR0cHM6Ly9mb3JtdmFsaWRhdGlvbi5pby9cclxuICAgICAgICB2YWxpZGF0b3IgPSBGb3JtVmFsaWRhdGlvbi5mb3JtVmFsaWRhdGlvbihcclxuICAgICAgICAgICAgZm9ybSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZmllbGRzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2NhbGVuZGFyX2V2ZW50X25hbWUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdEVtcHR5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0V2ZW50IG5hbWUgaXMgcmVxdWlyZWQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICdjYWxlbmRhcl9ldmVudF9zdGFydF9kYXRlJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3JzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RFbXB0eToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTdGFydCBkYXRlIGlzIHJlcXVpcmVkJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAnY2FsZW5kYXJfZXZlbnRfZW5kX2RhdGUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdEVtcHR5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0VuZCBkYXRlIGlzIHJlcXVpcmVkJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICBwbHVnaW5zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuVHJpZ2dlcigpLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvb3RzdHJhcDogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuQm9vdHN0cmFwNSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd1NlbGVjdG9yOiAnLmZ2LXJvdycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZUludmFsaWRDbGFzczogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZVZhbGlkQ2xhc3M6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIEhhbmRsZSBzdWJtaXQgZm9ybVxyXG4gICAgICAgIHN1Ym1pdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIC8vIFByZXZlbnQgZGVmYXVsdCBidXR0b24gYWN0aW9uXHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFZhbGlkYXRlIGZvcm0gYmVmb3JlIHN1Ym1pdFxyXG4gICAgICAgICAgICBpZiAodmFsaWRhdG9yKSB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3IudmFsaWRhdGUoKS50aGVuKGZ1bmN0aW9uIChzdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndmFsaWRhdGVkIScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09ICdWYWxpZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2hvdyBsb2FkaW5nIGluZGljYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS1rdC1pbmRpY2F0b3InLCAnb24nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpc2FibGUgc3VibWl0IGJ1dHRvbiB3aGlsc3QgbG9hZGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2ltdWxhdGUgZm9ybSBzdWJtaXNzaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2ltdWxhdGUgZm9ybSBzdWJtaXNzaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWt0LWluZGljYXRvcicpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNob3cgcG9wdXAgY29uZmlybWF0aW9uIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIk5ldyBldmVudCBhZGRlZCB0byBjYWxlbmRhciFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcInN1Y2Nlc3NcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcImJ0biBidG4tcHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5pc0NvbmZpcm1lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5oaWRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFbmFibGUgc3VibWl0IGJ1dHRvbiBhZnRlciBsb2FkaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIG9sZCBldmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhci5nZXRFdmVudEJ5SWQoZGF0YS5pZCkucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXRlY3QgaWYgaXMgYWxsIGRheSBldmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYWxsRGF5RXZlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsbERheVRvZ2dsZS5jaGVja2VkKSB7IGFsbERheUV2ZW50ID0gdHJ1ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRUaW1lRmxhdHBpY2tyLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAwKSB7IGFsbERheUV2ZW50ID0gdHJ1ZTsgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWVyZ2UgZGF0ZSAmIHRpbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0RGF0ZVRpbWUgPSBtb21lbnQoc3RhcnRGbGF0cGlja3Iuc2VsZWN0ZWREYXRlc1swXSkuZm9ybWF0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbmREYXRlVGltZSA9IG1vbWVudChlbmRGbGF0cGlja3Iuc2VsZWN0ZWREYXRlc1tlbmRGbGF0cGlja3Iuc2VsZWN0ZWREYXRlcy5sZW5ndGggLSAxXSkuZm9ybWF0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYWxsRGF5RXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IG1vbWVudChzdGFydEZsYXRwaWNrci5zZWxlY3RlZERhdGVzWzBdKS5mb3JtYXQoJ1lZWVktTU0tREQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZERhdGUgPSBzdGFydERhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBtb21lbnQoc3RhcnRUaW1lRmxhdHBpY2tyLnNlbGVjdGVkRGF0ZXNbMF0pLmZvcm1hdCgnSEg6bW06c3MnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZFRpbWUgPSBtb21lbnQoZW5kVGltZUZsYXRwaWNrci5zZWxlY3RlZERhdGVzWzBdKS5mb3JtYXQoJ0hIOm1tOnNzJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnREYXRlVGltZSA9IHN0YXJ0RGF0ZSArICdUJyArIHN0YXJ0VGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZERhdGVUaW1lID0gZW5kRGF0ZSArICdUJyArIGVuZFRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBuZXcgZXZlbnQgdG8gY2FsZW5kYXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXIuYWRkRXZlbnQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGV2ZW50TmFtZS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBldmVudERlc2NyaXB0aW9uLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGV2ZW50TG9jYXRpb24udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogc3RhcnREYXRlVGltZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogZW5kRGF0ZVRpbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxEYXk6IGFsbERheUV2ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhci5yZW5kZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IGZvcm0gZm9yIGRlbW8gcHVycG9zZXMgb25seVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLnJlc2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9mb3JtLnN1Ym1pdCgpOyAvLyBTdWJtaXQgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAyMDAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaG93IHBvcHVwIHdhcm5pbmcgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIlNvcnJ5LCBsb29rcyBsaWtlIHRoZXJlIGFyZSBzb21lIGVycm9ycyBkZXRlY3RlZCwgcGxlYXNlIHRyeSBhZ2Fpbi5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwiZXJyb3JcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGJ0bi1wcmltYXJ5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBIYW5kbGUgdmlldyBldmVudFxyXG4gICAgY29uc3QgaGFuZGxlVmlld0V2ZW50ID0gKCkgPT4ge1xyXG4gICAgICAgIHZpZXdNb2RhbC5zaG93KCk7XHJcblxyXG4gICAgICAgIC8vIERldGVjdCBhbGwgZGF5IGV2ZW50XHJcbiAgICAgICAgdmFyIGV2ZW50TmFtZU1vZDtcclxuICAgICAgICB2YXIgc3RhcnREYXRlTW9kO1xyXG4gICAgICAgIHZhciBlbmREYXRlTW9kO1xyXG5cclxuICAgICAgICAvLyBHZW5lcmF0ZSBsYWJlbHNcclxuICAgICAgICBpZiAoZGF0YS5hbGxEYXkpIHtcclxuICAgICAgICAgICAgZXZlbnROYW1lTW9kID0gJ0FsbCBEYXknO1xyXG4gICAgICAgICAgICBzdGFydERhdGVNb2QgPSBtb21lbnQoZGF0YS5zdGFydERhdGUpLmZvcm1hdCgnRG8gTU1NLCBZWVlZJyk7XHJcbiAgICAgICAgICAgIGVuZERhdGVNb2QgPSBtb21lbnQoZGF0YS5lbmREYXRlKS5mb3JtYXQoJ0RvIE1NTSwgWVlZWScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGV2ZW50TmFtZU1vZCA9ICcnO1xyXG4gICAgICAgICAgICBzdGFydERhdGVNb2QgPSBtb21lbnQoZGF0YS5zdGFydERhdGUpLmZvcm1hdCgnRG8gTU1NLCBZWVlZIC0gaDptbSBhJyk7XHJcbiAgICAgICAgICAgIGVuZERhdGVNb2QgPSBtb21lbnQoZGF0YS5lbmREYXRlKS5mb3JtYXQoJ0RvIE1NTSwgWVlZWSAtIGg6bW0gYScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUG9wdWxhdGUgdmlldyBkYXRhXHJcbiAgICAgICAgdmlld0V2ZW50TmFtZS5pbm5lclRleHQgPSBkYXRhLmV2ZW50TmFtZTtcclxuICAgICAgICB2aWV3QWxsRGF5LmlubmVyVGV4dCA9IGV2ZW50TmFtZU1vZDtcclxuICAgICAgICB2aWV3RXZlbnREZXNjcmlwdGlvbi5pbm5lclRleHQgPSBkYXRhLmV2ZW50RGVzY3JpcHRpb24gPyBkYXRhLmV2ZW50RGVzY3JpcHRpb24gOiAnLS0nO1xyXG4gICAgICAgIHZpZXdFdmVudExvY2F0aW9uLmlubmVyVGV4dCA9IGRhdGEuZXZlbnRMb2NhdGlvbiA/IGRhdGEuZXZlbnRMb2NhdGlvbiA6ICctLSc7XHJcbiAgICAgICAgdmlld1N0YXJ0RGF0ZS5pbm5lclRleHQgPSBzdGFydERhdGVNb2Q7XHJcbiAgICAgICAgdmlld0VuZERhdGUuaW5uZXJUZXh0ID0gZW5kRGF0ZU1vZDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBIYW5kbGUgZGVsZXRlIGV2ZW50XHJcbiAgICBjb25zdCBoYW5kbGVEZWxldGVFdmVudCA9ICgpID0+IHtcclxuICAgICAgICB2aWV3RGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkFyZSB5b3Ugc3VyZSB5b3Ugd291bGQgbGlrZSB0byBkZWxldGUgdGhpcyBldmVudD9cIixcclxuICAgICAgICAgICAgICAgIGljb246IFwid2FybmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIlllcywgZGVsZXRlIGl0IVwiLFxyXG4gICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCJObywgcmV0dXJuXCIsXHJcbiAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGJ0bi1wcmltYXJ5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uOiBcImJ0biBidG4tYWN0aXZlLWxpZ2h0XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXIuZ2V0RXZlbnRCeUlkKGRhdGEuaWQpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2aWV3TW9kYWwuaGlkZSgpOyAvLyBIaWRlIG1vZGFsXHRcdFx0XHRcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LmRpc21pc3MgPT09ICdjYW5jZWwnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJZb3VyIGV2ZW50IHdhcyBub3QgZGVsZXRlZCEuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwiZXJyb3JcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJPaywgZ290IGl0IVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gYnRuLXByaW1hcnlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGFuZGxlIGVkaXQgYnV0dG9uXHJcbiAgICBjb25zdCBoYW5kbGVFZGl0QnV0dG9uID0gKCkgPT4ge1xyXG4gICAgICAgIHZpZXdFZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIHZpZXdNb2RhbC5oaWRlKCk7XHJcbiAgICAgICAgICAgIGhhbmRsZUVkaXRFdmVudCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEhhbmRsZSBjYW5jZWwgYnV0dG9uXHJcbiAgICBjb25zdCBoYW5kbGVDYW5jZWxCdXR0b24gPSAoKSA9PiB7XHJcbiAgICAgICAgLy8gRWRpdCBldmVudCBtb2RhbCBjYW5jZWwgYnV0dG9uXHJcbiAgICAgICAgY2FuY2VsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IFwiQXJlIHlvdSBzdXJlIHlvdSB3b3VsZCBsaWtlIHRvIGNhbmNlbD9cIixcclxuICAgICAgICAgICAgICAgIGljb246IFwid2FybmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIlllcywgY2FuY2VsIGl0IVwiLFxyXG4gICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCJObywgcmV0dXJuXCIsXHJcbiAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGJ0bi1wcmltYXJ5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uOiBcImJ0biBidG4tYWN0aXZlLWxpZ2h0XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybS5yZXNldCgpOyAvLyBSZXNldCBmb3JtXHRcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbC5oaWRlKCk7IC8vIEhpZGUgbW9kYWxcdFx0XHRcdFxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuZGlzbWlzcyA9PT0gJ2NhbmNlbCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIllvdXIgZm9ybSBoYXMgbm90IGJlZW4gY2FuY2VsbGVkIS5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJlcnJvclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcImJ0biBidG4tcHJpbWFyeVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEhhbmRsZSBjbG9zZSBidXR0b25cclxuICAgIGNvbnN0IGhhbmRsZUNsb3NlQnV0dG9uID0gKCkgPT4ge1xyXG4gICAgICAgIC8vIEVkaXQgZXZlbnQgbW9kYWwgY2xvc2UgYnV0dG9uXHJcbiAgICAgICAgY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICAgICAgdGV4dDogXCJBcmUgeW91IHN1cmUgeW91IHdvdWxkIGxpa2UgdG8gY2FuY2VsP1wiLFxyXG4gICAgICAgICAgICAgICAgaWNvbjogXCJ3YXJuaW5nXCIsXHJcbiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiWWVzLCBjYW5jZWwgaXQhXCIsXHJcbiAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIk5vLCByZXR1cm5cIixcclxuICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gYnRuLXByaW1hcnlcIixcclxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b246IFwiYnRuIGJ0bi1hY3RpdmUtbGlnaHRcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtLnJlc2V0KCk7IC8vIFJlc2V0IGZvcm1cdFxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsLmhpZGUoKTsgLy8gSGlkZSBtb2RhbFx0XHRcdFx0XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5kaXNtaXNzID09PSAnY2FuY2VsJykge1xyXG4gICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiWW91ciBmb3JtIGhhcyBub3QgYmVlbiBjYW5jZWxsZWQhLlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcImVycm9yXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGJ0bi1wcmltYXJ5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGFuZGxlIHZpZXcgYnV0dG9uXHJcbiAgICBjb25zdCBoYW5kbGVWaWV3QnV0dG9uID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHZpZXdCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcja3RfY2FsZW5kYXJfZXZlbnRfdmlld19idXR0b24nKTtcclxuICAgICAgICB2aWV3QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIGhpZGVQb3BvdmVycygpO1xyXG4gICAgICAgICAgICBoYW5kbGVWaWV3RXZlbnQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBIZWxwZXIgZnVuY3Rpb25zXHJcblxyXG4gICAgLy8gUG9wdWxhdGUgZm9ybSBcclxuICAgIGNvbnN0IHBvcHVsYXRlRm9ybSA9ICgpID0+IHtcclxuICAgICAgICBldmVudE5hbWUudmFsdWUgPSBkYXRhLmV2ZW50TmFtZSA/IGRhdGEuZXZlbnROYW1lIDogJyc7XHJcbiAgICAgICAgZXZlbnREZXNjcmlwdGlvbi52YWx1ZSA9IGRhdGEuZXZlbnREZXNjcmlwdGlvbiA/IGRhdGEuZXZlbnREZXNjcmlwdGlvbiA6ICcnO1xyXG4gICAgICAgIGV2ZW50TG9jYXRpb24udmFsdWUgPSBkYXRhLmV2ZW50TG9jYXRpb24gPyBkYXRhLmV2ZW50TG9jYXRpb24gOiAnJztcclxuICAgICAgICBzdGFydEZsYXRwaWNrci5zZXREYXRlKGRhdGEuc3RhcnREYXRlLCB0cnVlLCAnWS1tLWQnKTtcclxuXHJcbiAgICAgICAgLy8gSGFuZGxlIG51bGwgZW5kIGRhdGVzXHJcbiAgICAgICAgY29uc3QgZW5kRGF0ZSA9IGRhdGEuZW5kRGF0ZSA/IGRhdGEuZW5kRGF0ZSA6IG1vbWVudChkYXRhLnN0YXJ0RGF0ZSkuZm9ybWF0KCk7XHJcbiAgICAgICAgZW5kRmxhdHBpY2tyLnNldERhdGUoZW5kRGF0ZSwgdHJ1ZSwgJ1ktbS1kJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGFsbERheVRvZ2dsZSA9IGZvcm0ucXVlcnlTZWxlY3RvcignI2t0X2NhbGVuZGFyX2RhdGVwaWNrZXJfYWxsZGF5Jyk7XHJcbiAgICAgICAgY29uc3QgZGF0ZXBpY2tlcldyYXBwZXJzID0gZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1rdC1jYWxlbmRhcj1cImRhdGVwaWNrZXJcIl0nKTtcclxuICAgICAgICBpZiAoZGF0YS5hbGxEYXkpIHtcclxuICAgICAgICAgICAgYWxsRGF5VG9nZ2xlLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBkYXRlcGlja2VyV3JhcHBlcnMuZm9yRWFjaChkdyA9PiB7XHJcbiAgICAgICAgICAgICAgICBkdy5jbGFzc0xpc3QuYWRkKCdkLW5vbmUnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3RhcnRUaW1lRmxhdHBpY2tyLnNldERhdGUoZGF0YS5zdGFydERhdGUsIHRydWUsICdZLW0tZCBIOmknKTtcclxuICAgICAgICAgICAgZW5kVGltZUZsYXRwaWNrci5zZXREYXRlKGRhdGEuZW5kRGF0ZSwgdHJ1ZSwgJ1ktbS1kIEg6aScpO1xyXG4gICAgICAgICAgICBlbmRGbGF0cGlja3Iuc2V0RGF0ZShkYXRhLnN0YXJ0RGF0ZSwgdHJ1ZSwgJ1ktbS1kJyk7XHJcbiAgICAgICAgICAgIGFsbERheVRvZ2dsZS5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGRhdGVwaWNrZXJXcmFwcGVycy5mb3JFYWNoKGR3ID0+IHtcclxuICAgICAgICAgICAgICAgIGR3LmNsYXNzTGlzdC5yZW1vdmUoJ2Qtbm9uZScpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRm9ybWF0IEZ1bGxDYWxlbmRhciByZXBvbnNlc1xyXG4gICAgY29uc3QgZm9ybWF0QXJncyA9IChyZXMpID0+IHtcclxuICAgICAgICBkYXRhLmlkID0gcmVzLmlkO1xyXG4gICAgICAgIGRhdGEuZXZlbnROYW1lID0gcmVzLnRpdGxlO1xyXG4gICAgICAgIGRhdGEuZXZlbnREZXNjcmlwdGlvbiA9IHJlcy5kZXNjcmlwdGlvbjtcclxuICAgICAgICBkYXRhLmV2ZW50TG9jYXRpb24gPSByZXMubG9jYXRpb247XHJcbiAgICAgICAgZGF0YS5zdGFydERhdGUgPSByZXMuc3RhcnRTdHI7XHJcbiAgICAgICAgZGF0YS5lbmREYXRlID0gcmVzLmVuZFN0cjtcclxuICAgICAgICBkYXRhLmFsbERheSA9IHJlcy5hbGxEYXk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR2VuZXJhdGUgdW5pcXVlIElEcyBmb3IgZXZlbnRzXHJcbiAgICBjb25zdCB1aWQgPSAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIERhdGUubm93KCkudG9TdHJpbmcoKSArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDApLnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyBQdWJsaWMgRnVuY3Rpb25zXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBEZWZpbmUgdmFyaWFibGVzXHJcbiAgICAgICAgICAgIC8vIEFkZCBldmVudCBtb2RhbFxyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2t0X21vZGFsX2FkZF9ldmVudCcpO1xyXG4gICAgICAgICAgICBmb3JtID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcja3RfbW9kYWxfYWRkX2V2ZW50X2Zvcm0nKTtcclxuICAgICAgICAgICAgZXZlbnROYW1lID0gZm9ybS5xdWVyeVNlbGVjdG9yKCdbbmFtZT1cImNhbGVuZGFyX2V2ZW50X25hbWVcIl0nKTtcclxuICAgICAgICAgICAgZXZlbnREZXNjcmlwdGlvbiA9IGZvcm0ucXVlcnlTZWxlY3RvcignW25hbWU9XCJjYWxlbmRhcl9ldmVudF9kZXNjcmlwdGlvblwiXScpO1xyXG4gICAgICAgICAgICBldmVudExvY2F0aW9uID0gZm9ybS5xdWVyeVNlbGVjdG9yKCdbbmFtZT1cImNhbGVuZGFyX2V2ZW50X2xvY2F0aW9uXCJdJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RGF0ZXBpY2tlciA9IGZvcm0ucXVlcnlTZWxlY3RvcignI2t0X2NhbGVuZGFyX2RhdGVwaWNrZXJfc3RhcnRfZGF0ZScpO1xyXG4gICAgICAgICAgICBlbmREYXRlcGlja2VyID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcja3RfY2FsZW5kYXJfZGF0ZXBpY2tlcl9lbmRfZGF0ZScpO1xyXG4gICAgICAgICAgICBzdGFydFRpbWVwaWNrZXIgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNrdF9jYWxlbmRhcl9kYXRlcGlja2VyX3N0YXJ0X3RpbWUnKTtcclxuICAgICAgICAgICAgZW5kVGltZXBpY2tlciA9IGZvcm0ucXVlcnlTZWxlY3RvcignI2t0X2NhbGVuZGFyX2RhdGVwaWNrZXJfZW5kX3RpbWUnKTtcclxuICAgICAgICAgICAgYWRkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEta3QtY2FsZW5kYXI9XCJhZGRcIl0nKTtcclxuICAgICAgICAgICAgc3VibWl0QnV0dG9uID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcja3RfbW9kYWxfYWRkX2V2ZW50X3N1Ym1pdCcpO1xyXG4gICAgICAgICAgICBjYW5jZWxCdXR0b24gPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNrdF9tb2RhbF9hZGRfZXZlbnRfY2FuY2VsJyk7XHJcbiAgICAgICAgICAgIGNsb3NlQnV0dG9uID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcja3RfbW9kYWxfYWRkX2V2ZW50X2Nsb3NlJyk7XHJcbiAgICAgICAgICAgIG1vZGFsVGl0bGUgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LWNhbGVuZGFyPVwidGl0bGVcIl0nKTtcclxuICAgICAgICAgICAgbW9kYWwgPSBuZXcgYm9vdHN0cmFwLk1vZGFsKGVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgLy8gVmlldyBldmVudCBtb2RhbFxyXG4gICAgICAgICAgICBjb25zdCB2aWV3RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdrdF9tb2RhbF92aWV3X2V2ZW50Jyk7XHJcbiAgICAgICAgICAgIHZpZXdNb2RhbCA9IG5ldyBib290c3RyYXAuTW9kYWwodmlld0VsZW1lbnQpO1xyXG4gICAgICAgICAgICB2aWV3RXZlbnROYW1lID0gdmlld0VsZW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEta3QtY2FsZW5kYXI9XCJldmVudF9uYW1lXCJdJyk7XHJcbiAgICAgICAgICAgIHZpZXdBbGxEYXkgPSB2aWV3RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1jYWxlbmRhcj1cImFsbF9kYXlcIl0nKTtcclxuICAgICAgICAgICAgdmlld0V2ZW50RGVzY3JpcHRpb24gPSB2aWV3RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1jYWxlbmRhcj1cImV2ZW50X2Rlc2NyaXB0aW9uXCJdJyk7XHJcbiAgICAgICAgICAgIHZpZXdFdmVudExvY2F0aW9uID0gdmlld0VsZW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEta3QtY2FsZW5kYXI9XCJldmVudF9sb2NhdGlvblwiXScpO1xyXG4gICAgICAgICAgICB2aWV3U3RhcnREYXRlID0gdmlld0VsZW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEta3QtY2FsZW5kYXI9XCJldmVudF9zdGFydF9kYXRlXCJdJyk7XHJcbiAgICAgICAgICAgIHZpZXdFbmREYXRlID0gdmlld0VsZW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEta3QtY2FsZW5kYXI9XCJldmVudF9lbmRfZGF0ZVwiXScpO1xyXG4gICAgICAgICAgICB2aWV3RWRpdEJ1dHRvbiA9IHZpZXdFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJyNrdF9tb2RhbF92aWV3X2V2ZW50X2VkaXQnKTtcclxuICAgICAgICAgICAgdmlld0RlbGV0ZUJ1dHRvbiA9IHZpZXdFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJyNrdF9tb2RhbF92aWV3X2V2ZW50X2RlbGV0ZScpO1xyXG5cclxuICAgICAgICAgICAgaW5pdENhbGVuZGFyQXBwKCk7XHJcbiAgICAgICAgICAgIGluaXREYXRlcGlja2VycygpO1xyXG4gICAgICAgICAgICBoYW5kbGVFZGl0QnV0dG9uKCk7XHJcbiAgICAgICAgICAgIGhhbmRsZUFkZEJ1dHRvbigpO1xyXG4gICAgICAgICAgICBoYW5kbGVEZWxldGVFdmVudCgpO1xyXG4gICAgICAgICAgICBoYW5kbGVDYW5jZWxCdXR0b24oKTtcclxuICAgICAgICAgICAgaGFuZGxlQ2xvc2VCdXR0b24oKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KCk7XHJcblxyXG4vLyBPbiBkb2N1bWVudCByZWFkeVxyXG5LVFV0aWwub25ET01Db250ZW50TG9hZGVkKGZ1bmN0aW9uICgpIHtcclxuICAgIEtUQXBwQ2FsZW5kYXIuaW5pdCgpO1xyXG59KTtcclxuIl0sIm5hbWVzIjpbIktUQXBwQ2FsZW5kYXIiLCJjYWxlbmRhciIsImRhdGEiLCJpZCIsImV2ZW50TmFtZSIsImV2ZW50RGVzY3JpcHRpb24iLCJldmVudExvY2F0aW9uIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsImFsbERheSIsInBvcG92ZXIiLCJwb3BvdmVyU3RhdGUiLCJzdGFydERhdGVwaWNrZXIiLCJzdGFydEZsYXRwaWNrciIsImVuZERhdGVwaWNrZXIiLCJlbmRGbGF0cGlja3IiLCJzdGFydFRpbWVwaWNrZXIiLCJzdGFydFRpbWVGbGF0cGlja3IiLCJlbmRUaW1lcGlja2VyIiwiZW5kVGltZUZsYXRwaWNrciIsIm1vZGFsIiwibW9kYWxUaXRsZSIsImZvcm0iLCJ2YWxpZGF0b3IiLCJhZGRCdXR0b24iLCJzdWJtaXRCdXR0b24iLCJjYW5jZWxCdXR0b24iLCJjbG9zZUJ1dHRvbiIsInZpZXdFdmVudE5hbWUiLCJ2aWV3QWxsRGF5Iiwidmlld0V2ZW50RGVzY3JpcHRpb24iLCJ2aWV3RXZlbnRMb2NhdGlvbiIsInZpZXdTdGFydERhdGUiLCJ2aWV3RW5kRGF0ZSIsInZpZXdNb2RhbCIsInZpZXdFZGl0QnV0dG9uIiwidmlld0RlbGV0ZUJ1dHRvbiIsImluaXRDYWxlbmRhckFwcCIsImNhbGVuZGFyRWwiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwidG9kYXlEYXRlIiwibW9tZW50Iiwic3RhcnRPZiIsIllNIiwiZm9ybWF0IiwiWUVTVEVSREFZIiwiY2xvbmUiLCJzdWJ0cmFjdCIsIlRPREFZIiwiVE9NT1JST1ciLCJhZGQiLCJGdWxsQ2FsZW5kYXIiLCJDYWxlbmRhciIsImhlYWRlclRvb2xiYXIiLCJsZWZ0IiwiY2VudGVyIiwicmlnaHQiLCJpbml0aWFsRGF0ZSIsIm5hdkxpbmtzIiwic2VsZWN0YWJsZSIsInNlbGVjdE1pcnJvciIsInNlbGVjdCIsImFyZyIsImhpZGVQb3BvdmVycyIsImZvcm1hdEFyZ3MiLCJoYW5kbGVOZXdFdmVudCIsImV2ZW50Q2xpY2siLCJldmVudCIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJleHRlbmRlZFByb3BzIiwibG9jYXRpb24iLCJzdGFydFN0ciIsImVuZFN0ciIsImhhbmRsZVZpZXdFdmVudCIsImV2ZW50TW91c2VFbnRlciIsImluaXRQb3BvdmVycyIsImVsIiwiZWRpdGFibGUiLCJkYXlNYXhFdmVudHMiLCJldmVudHMiLCJ1aWQiLCJzdGFydCIsImVuZCIsImNsYXNzTmFtZSIsInJlbmRlciIsImVsZW1lbnQiLCJwb3BvdmVySHRtbCIsIm9wdGlvbnMiLCJjb250YWluZXIiLCJ0cmlnZ2VyIiwiYm91bmRhcnkiLCJwbGFjZW1lbnQiLCJkaXNtaXNzIiwiaHRtbCIsImNvbnRlbnQiLCJLVEFwcCIsImluaXRCb290c3RyYXBQb3BvdmVyIiwic2hvdyIsImhhbmRsZVZpZXdCdXR0b24iLCJkaXNwb3NlIiwiaW5pdERhdGVwaWNrZXJzIiwiZmxhdHBpY2tyIiwiZW5hYmxlVGltZSIsImRhdGVGb3JtYXQiLCJub0NhbGVuZGFyIiwiaGFuZGxlQWRkQnV0dG9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJpbm5lclRleHQiLCJkYXRlcGlja2VyV3JhcHBlcnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYWxsRGF5VG9nZ2xlIiwicXVlcnlTZWxlY3RvciIsInRhcmdldCIsImNoZWNrZWQiLCJmb3JFYWNoIiwiZHciLCJjbGFzc0xpc3QiLCJzZXREYXRlIiwicmVtb3ZlIiwicG9wdWxhdGVGb3JtIiwiRm9ybVZhbGlkYXRpb24iLCJmb3JtVmFsaWRhdGlvbiIsImZpZWxkcyIsInZhbGlkYXRvcnMiLCJub3RFbXB0eSIsIm1lc3NhZ2UiLCJwbHVnaW5zIiwiVHJpZ2dlciIsImJvb3RzdHJhcCIsIkJvb3RzdHJhcDUiLCJyb3dTZWxlY3RvciIsImVsZUludmFsaWRDbGFzcyIsImVsZVZhbGlkQ2xhc3MiLCJwcmV2ZW50RGVmYXVsdCIsInZhbGlkYXRlIiwidGhlbiIsInN0YXR1cyIsImNvbnNvbGUiLCJsb2ciLCJzZXRBdHRyaWJ1dGUiLCJkaXNhYmxlZCIsInNldFRpbWVvdXQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJTd2FsIiwiZmlyZSIsInRleHQiLCJpY29uIiwiYnV0dG9uc1N0eWxpbmciLCJjb25maXJtQnV0dG9uVGV4dCIsImN1c3RvbUNsYXNzIiwiY29uZmlybUJ1dHRvbiIsInJlc3VsdCIsImlzQ29uZmlybWVkIiwiaGlkZSIsImFsbERheUV2ZW50Iiwic2VsZWN0ZWREYXRlcyIsImxlbmd0aCIsInN0YXJ0RGF0ZVRpbWUiLCJlbmREYXRlVGltZSIsInN0YXJ0VGltZSIsImVuZFRpbWUiLCJhZGRFdmVudCIsInZhbHVlIiwicmVzZXQiLCJoYW5kbGVFZGl0RXZlbnQiLCJnZXRFdmVudEJ5SWQiLCJldmVudE5hbWVNb2QiLCJzdGFydERhdGVNb2QiLCJlbmREYXRlTW9kIiwiaGFuZGxlRGVsZXRlRXZlbnQiLCJzaG93Q2FuY2VsQnV0dG9uIiwiY2FuY2VsQnV0dG9uVGV4dCIsImhhbmRsZUVkaXRCdXR0b24iLCJoYW5kbGVDYW5jZWxCdXR0b24iLCJoYW5kbGVDbG9zZUJ1dHRvbiIsInZpZXdCdXR0b24iLCJyZXMiLCJEYXRlIiwibm93IiwidG9TdHJpbmciLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJpbml0IiwiTW9kYWwiLCJ2aWV3RWxlbWVudCIsIktUVXRpbCIsIm9uRE9NQ29udGVudExvYWRlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/theme1/js/custom/apps/calendar/calendar.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/theme1/js/custom/apps/calendar/calendar.js"]();
/******/ 	
/******/ })()
;